name: CI
on:
  push:
  pull_request:
  schedule:
    - cron: '0 3 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.tier == 'legacy' }}
    strategy:
      matrix:
        include:
          - pandas_version: "2.2.2"
            numpy_version: "2.0.2"
            tier: lts
            python_version: "3.12"
          - pandas_version: "1.5.3"
            numpy_version: "1.26.4"
            tier: legacy
            python_version: "3.12"
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python_version }}"
          cache: pip

      - name: Pre-install build toolchain & compatibility pins
        run: |
          sudo apt-get update -qq
          sudo apt-get -y install build-essential python3-dev libta-lib0-dev
          pip install --upgrade pip
          pip install --prefer-binary \
            "pyarrow<15" \
            "pandas-ta==0.3.14b0" "setuptools<69" "cython<3" wheel

      - name: Install project dependencies (binary-first)
        run: |
          pip install --no-binary=ta-lib ta-lib==0.4.26
          PIP_ONLY_BINARY=":all:" pip install -r requirements.txt

      - name: Install dev dependencies
        run: |
          pip install -r requirements-dev.txt
          pip install pytest-cov
          pip install "pandas==${{ matrix.pandas_version }}" \
                      "numpy==${{ matrix.numpy_version }}"

      - name: Lint & Tests via pre-commit
        run: |
          pip install pre-commit
          pre-commit run --all-files

      - name: Run tests
        run: |
          pytest -q -m "not slow" --cov . --cov-report=xml
          pytest -q tests/test_report_format.py

      - name: Run nightly tests
        if: ${{ github.event_name == 'schedule' }}
        run: |
          pytest -q --cov . --cov-report=xml
      - name: Run simple backtest
        run: |
          python - <<'PY'
          import pandas as pd, report_generator, os
          os.makedirs('cikti/raporlar', exist_ok=True)
          df = pd.DataFrame({
              'filtre_kodu': ['F1'],
              'bulunan_hisse_sayisi': [1],
              'ortalama_getiri': [1.0],
              'notlar': [''],
              'tarama_tarihi': ['01.01.2025'],
              'satis_tarihi': ['02.01.2025'],
          })
          report_generator.kaydet_uc_sekmeli_excel(
              'cikti/raporlar/rapor_ci.xlsx',
              df,
              df,
              df,
          )
          PY
      - name: Generate health report
        run: |
          python - <<'PY'
          import log_to_health, os, glob
          os.makedirs('cikti/raporlar', exist_ok=True)
          log_files = glob.glob('*.log') or ['ci.log']
          if log_files == ['ci.log']:
              open('ci.log','w').write('ci log')
          log_to_health.generate(
              log_files[-1],
              ['cikti/raporlar/rapor_ci.xlsx'],
          )
          PY

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: "reports-${{ matrix.pandas_version }}"
          path: '*.xlsx'

  docker:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t finansal_analiz:latest .
